// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	entity "autoDiagnosticService/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockRecognition is a mock of Recognition interface.
type MockRecognition struct {
	ctrl     *gomock.Controller
	recorder *MockRecognitionMockRecorder
}

// MockRecognitionMockRecorder is the mock recorder for MockRecognition.
type MockRecognitionMockRecorder struct {
	mock *MockRecognition
}

// NewMockRecognition creates a new mock instance.
func NewMockRecognition(ctrl *gomock.Controller) *MockRecognition {
	mock := &MockRecognition{ctrl: ctrl}
	mock.recorder = &MockRecognitionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecognition) EXPECT() *MockRecognitionMockRecorder {
	return m.recorder
}

// AddPoints mocks base method.
func (m *MockRecognition) AddPoints(ctx context.Context, number int, userName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPoints", ctx, number, userName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPoints indicates an expected call of AddPoints.
func (mr *MockRecognitionMockRecorder) AddPoints(ctx, number, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoints", reflect.TypeOf((*MockRecognition)(nil).AddPoints), ctx, number, userName)
}

// AddRequest mocks base method.
func (m *MockRecognition) AddRequest(arg0 context.Context, arg1 entity.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRequest indicates an expected call of AddRequest.
func (mr *MockRecognitionMockRecorder) AddRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequest", reflect.TypeOf((*MockRecognition)(nil).AddRequest), arg0, arg1)
}

// AddUser mocks base method.
func (m *MockRecognition) AddUser(arg0 context.Context, arg1 entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockRecognitionMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockRecognition)(nil).AddUser), arg0, arg1)
}

// GetRecognitionAnswersTG mocks base method.
func (m *MockRecognition) GetRecognitionAnswersTG(ctx context.Context) ([]entity.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecognitionAnswersTG", ctx)
	ret0, _ := ret[0].([]entity.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecognitionAnswersTG indicates an expected call of GetRecognitionAnswersTG.
func (mr *MockRecognitionMockRecorder) GetRecognitionAnswersTG(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecognitionAnswersTG", reflect.TypeOf((*MockRecognition)(nil).GetRecognitionAnswersTG), ctx)
}

// GetRecognitionAnswersWEB mocks base method.
func (m *MockRecognition) GetRecognitionAnswersWEB(ctx context.Context, userName string) ([]entity.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecognitionAnswersWEB", ctx, userName)
	ret0, _ := ret[0].([]entity.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecognitionAnswersWEB indicates an expected call of GetRecognitionAnswersWEB.
func (mr *MockRecognitionMockRecorder) GetRecognitionAnswersWEB(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecognitionAnswersWEB", reflect.TypeOf((*MockRecognition)(nil).GetRecognitionAnswersWEB), ctx, userName)
}

// GetRecognitionTasks mocks base method.
func (m *MockRecognition) GetRecognitionTasks(arg0 context.Context) ([]entity.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecognitionTasks", arg0)
	ret0, _ := ret[0].([]entity.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecognitionTasks indicates an expected call of GetRecognitionTasks.
func (mr *MockRecognitionMockRecorder) GetRecognitionTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecognitionTasks", reflect.TypeOf((*MockRecognition)(nil).GetRecognitionTasks), arg0)
}

// LoginWEB mocks base method.
func (m *MockRecognition) Login(arg0 context.Context, arg1 entity.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWEB", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWEB indicates an expected call of LoginWEB.
func (mr *MockRecognitionMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWEB", reflect.TypeOf((*MockRecognition)(nil).Login), arg0, arg1)
}

// MakeRecognized mocks base method.
func (m *MockRecognition) MakeRecognized(arg0 context.Context, arg1 entity.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRecognized", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeRecognized indicates an expected call of MakeRecognized.
func (mr *MockRecognitionMockRecorder) MakeRecognized(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRecognized", reflect.TypeOf((*MockRecognition)(nil).MakeRecognized), arg0, arg1)
}

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddPoints mocks base method.
func (m *MockRepo) AddPoints(ctx context.Context, number int, userName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPoints", ctx, number, userName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPoints indicates an expected call of AddPoints.
func (mr *MockRepoMockRecorder) AddPoints(ctx, number, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoints", reflect.TypeOf((*MockRepo)(nil).AddPoints), ctx, number, userName)
}

// AddRequest mocks base method.
func (m *MockRepo) AddRequest(arg0 context.Context, arg1 entity.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRequest indicates an expected call of AddRequest.
func (mr *MockRepoMockRecorder) AddRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequest", reflect.TypeOf((*MockRepo)(nil).AddRequest), arg0, arg1)
}

// AddRequestWEB mocks base method.
func (m *MockRepo) AddRequestWEB(arg0 context.Context, arg1 entity.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRequestWEB", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRequestWEB indicates an expected call of AddRequestWEB.
func (mr *MockRepoMockRecorder) AddRequestWEB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequestWEB", reflect.TypeOf((*MockRepo)(nil).AddRequestWEB), arg0, arg1)
}

// GetRecognitionAnswersTG mocks base method.
func (m *MockRepo) GetRecognitionAnswersTG(arg0 context.Context) ([]entity.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecognitionAnswersTG", arg0)
	ret0, _ := ret[0].([]entity.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecognitionAnswersTG indicates an expected call of GetRecognitionAnswersTG.
func (mr *MockRepoMockRecorder) GetRecognitionAnswersTG(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecognitionAnswersTG", reflect.TypeOf((*MockRepo)(nil).GetRecognitionAnswersTG), arg0)
}

// GetRecognitionAnswersWEB mocks base method.
func (m *MockRepo) GetRecognitionAnswersWEB(ctx context.Context, userName string) ([]entity.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecognitionAnswersWEB", ctx, userName)
	ret0, _ := ret[0].([]entity.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecognitionAnswersWEB indicates an expected call of GetRecognitionAnswersWEB.
func (mr *MockRepoMockRecorder) GetRecognitionAnswersWEB(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecognitionAnswersWEB", reflect.TypeOf((*MockRepo)(nil).GetRecognitionAnswersWEB), ctx, userName)
}

// GetRecognitionTasks mocks base method.
func (m *MockRepo) GetRecognitionTasks(arg0 context.Context) ([]entity.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecognitionTasks", arg0)
	ret0, _ := ret[0].([]entity.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecognitionTasks indicates an expected call of GetRecognitionTasks.
func (mr *MockRepoMockRecorder) GetRecognitionTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecognitionTasks", reflect.TypeOf((*MockRepo)(nil).GetRecognitionTasks), arg0)
}

// MakeRecognized mocks base method.
func (m *MockRepo) MakeRecognized(arg0 context.Context, arg1 entity.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRecognized", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeRecognized indicates an expected call of MakeRecognized.
func (mr *MockRepoMockRecorder) MakeRecognized(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRecognized", reflect.TypeOf((*MockRepo)(nil).MakeRecognized), arg0, arg1)
}

// MockBalance is a mock of Balance interface.
type MockBalance struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceMockRecorder
}

// MockBalanceMockRecorder is the mock recorder for MockBalance.
type MockBalanceMockRecorder struct {
	mock *MockBalance
}

// NewMockBalance creates a new mock instance.
func NewMockBalance(ctrl *gomock.Controller) *MockBalance {
	mock := &MockBalance{ctrl: ctrl}
	mock.recorder = &MockBalanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalance) EXPECT() *MockBalanceMockRecorder {
	return m.recorder
}

// AddPoints mocks base method.
func (m *MockBalance) AddPoints(ctx context.Context, number int, userName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPoints", ctx, number, userName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPoints indicates an expected call of AddPoints.
func (mr *MockBalanceMockRecorder) AddPoints(ctx, number, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoints", reflect.TypeOf((*MockBalance)(nil).AddPoints), ctx, number, userName)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockAuth) AddUser(arg0 context.Context, arg1 entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockAuthMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockAuth)(nil).AddUser), arg0, arg1)
}

// LoginWEB mocks base method.
func (m *MockAuth) Login(arg0 context.Context, arg1 entity.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWEB", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWEB indicates an expected call of LoginWEB.
func (mr *MockAuthMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWEB", reflect.TypeOf((*MockAuth)(nil).Login), arg0, arg1)
}

// MockDetectionWorker is a mock of DetectionWorker interface.
type MockDetectionWorker struct {
	ctrl     *gomock.Controller
	recorder *MockDetectionWorkerMockRecorder
}

// MockDetectionWorkerMockRecorder is the mock recorder for MockDetectionWorker.
type MockDetectionWorkerMockRecorder struct {
	mock *MockDetectionWorker
}

// NewMockDetectionWorker creates a new mock instance.
func NewMockDetectionWorker(ctrl *gomock.Controller) *MockDetectionWorker {
	mock := &MockDetectionWorker{ctrl: ctrl}
	mock.recorder = &MockDetectionWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDetectionWorker) EXPECT() *MockDetectionWorkerMockRecorder {
	return m.recorder
}
